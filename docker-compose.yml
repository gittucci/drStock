version: '3.8'

services:
#Catalog
  catalog_db:
    image: postgres:latest
    container_name: catalog_db
    volumes:
      - catalog_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: catalog_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - catalog
  catalog_backend:
    container_name: catalog_backend
    build:
      context: ./services/catalog
      dockerfile: Dockerfile
    volumes:
      - ./services/catalog/app:/app
    working_dir: /app
    ports:
      - "8000:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      catalog_db:
        condition: service_healthy
    restart: always
    networks:
      - catalog
      - users
  # catalog_queue:
  #   build: .    
  #   #build: ./services/catalog
  #   command: >
  #     sh -c "python manage.py wait_for_db && python consumer.py"
  #   depends_on:
  #     - catalog_db
  #   networks:
  #     - catalog

  # Customers
  customers_db:
    image: postgres:latest
    container_name: customers_db
    volumes:
      - customers_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: customers_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - customers
  customers_backend:
    container_name: customers_backend
    build:
      context: ./services/customers
      dockerfile: Dockerfile
    volumes:
      - ./services/customers/app:/app
    working_dir: /app
    ports:
      - "8001:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      customers_db:
        condition: service_healthy
    restart: always
    networks:
      - customers
      - users
  # customers_queue:
  #   build: .    
  #   #build: ./services/customers
  #   command: >
  #     sh -c "python manage.py wait_for_db && python consumer.py"
  #   depends_on:
  #     - customers_db
  #   networks:
  #     - customers

  # Entries
  entries_db:
    image: postgres:latest
    container_name: entries_db
    volumes:
      - entries_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: entries_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - entries
  entries_backend:
    container_name: entries_backend
    build:
      context: ./services/entries
      dockerfile: Dockerfile
    volumes:
      - ./services/entries/app:/app
    working_dir: /app
    ports:
      - "8002:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      entries_db:
        condition: service_healthy
    restart: always
    networks:
      - entries
      - users
  # entries_queue:
  #   build: .    
  #   #build: ./services/entries
  #   command: >
  #     sh -c "python manage.py wait_for_db && python consumer.py"
  #   depends_on:
  #     - entries_db
  #   networks:
  #     - entries

  # Exits
  exits_db:
    image: postgres:latest
    container_name: exits_db
    volumes:
      - exits_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: exits_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - exits
  exits_backend:
    container_name: exits_backend
    build:
      context: ./services/exits
      dockerfile: Dockerfile
    volumes:
      - ./services/exits/app:/app
    working_dir: /app
    ports:
      - "8003:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      exits_db:
        condition: service_healthy
    restart: always
    networks:
      - exits
      - users
  # exits_queue:
  #   build: .    
  #   #build: ./services/exits
  #   command: >
  #     sh -c "python manage.py wait_for_db && python consumer.py"
  #   depends_on:
  #     - catalog_db
  #   networks:
  #     - exits

  # Stock
  stock_db:
    image: postgres:latest
    container_name: stock_db
    volumes:
      - stock_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: stock_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - stock
  stock_backend:
    container_name: stock_backend
    build:
      context: ./services/stock
      dockerfile: Dockerfile
    volumes:
      - ./services/stock/app:/app
    working_dir: /app
    ports:
      - "8004:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      stock_db:
        condition: service_healthy
    restart: always
    networks:
      - stock
      - users
  # stock_queue:
  #   build: .    
  #   #build: ./services/stock
  #   command: >
  #     sh -c "python manage.py wait_for_db && python consumer.py"
  #   depends_on:
  #     - stock_db
  #   networks:
  #     - stock

  # Suppliers
  suppliers_db:
    image: postgres:latest
    container_name: suppliers_db
    volumes:
      - suppliers_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: suppliers_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5437:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - suppliers
  suppliers_backend:
    container_name: suppliers_backend
    build:
      context: ./services/suppliers
      dockerfile: Dockerfile
    volumes:
      - ./services/suppliers/app:/app
    working_dir: /app
    ports:
      - "8005:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      suppliers_db:
        condition: service_healthy
    restart: always
    networks:
      - suppliers
      - users
  # suppliers_queue:
  #   build: .    
  #   #build: ./services/suppliers
  #   command: >
  #     sh -c "python manage.py wait_for_db && python consumer.py"
  #   depends_on:
  #     - suppliers_db
  #   networks:
  #     - suppliers

  # Gateway
  gateway:
    container_name: gateway
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    volumes:
      - ./services/gateway/app:/app
    working_dir: /app
    ports:
      - "8007:8000"
    environment:
      BACKEND_URL_CATALOG: "http://catalog_backend:8000"
      BACKEND_URL_CUSTOMERS: "http://customers_backend:8001"
      BACKEND_URL_ENTRIES: "http://entries_backend:8002"
      BACKEND_URL_EXITS: "http://exits_backend:8003"
      BACKEND_URL_STOCK: "http://stock_backend:8004"
      BACKEND_URL_SUPPLIERS: "http://suppliers_backend:8005"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    restart: always
    networks:
      - catalog
      - customers
      - entries
      - exits
      - stock
      - suppliers
      - users

  # # Frontend
  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - gateway
  #   networks:
  #     - users

# Messaging (RabbitMQ)
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER} # Usuário do RabbitMQ
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS} # Senha do RabbitMQ
    ports:
      - "5672:5672" # Porta de comunicação entre serviços
      - "15672:15672" # Interface de gerenciamento do RabbitMQ
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"] # Verifica se o RabbitMQ está funcionando
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comunicacao_microsservicos

volumes:
  catalog_volume:
  customers_volume:
  entries_volume:
  exits_volume:
  stock_volume:
  suppliers_volume:

networks:
  catalog:
    driver: bridge
  customers:
    driver: bridge
  entries:
    driver: bridge
  exits:
    driver: bridge
  stock:
    driver: bridge
  suppliers:
    driver: bridge
  users:
    driver: bridge
  comunicacao_microsservicos:
  # rede_principal:
  #   external: true